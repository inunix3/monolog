int PLAYER_COUNT = 4;

int clamp(int x, int min, int max) {
    if (x < min) {
        return min;
    } else if (x > max) {
        return max;
    } else {
        return x;
    }
}

int roll_dice() {
    return random_range(1, 6);
}

int check_winner([int] player_dists, int dist) {
    for (int i = 0; i < PLAYER_COUNT; ++i) {
        if (player_dists[i] >= dist - 1) {
            return i;
        }
    }

    return -1;
}

void draw([int] player_dists, int dist) {
    for (int i = 0; i < PLAYER_COUNT; ++i) {
        print($(i + 1) + ". player: ");

        for (int j = 0; j < dist; ++j) {
            if (player_dists[i] == j) {
                print("o");
            } else {
                print(".");
            }
        }

        println("");
    }
}

print("Distance: ");
int? dist = input_int();

if (dist == nil) {
    println("Error");
    exit(-1);
}

int dist = *dist;

[int, PLAYER_COUNT] player_dists;

for (int i = 0;; ++i) {
    draw(player_dists, dist);

    int winner = check_winner(player_dists, dist);

    if (winner > -1) {
        println("Player " + $(winner + 1) + " has won!");

        break;
    }

    print("Continue? (1 = YES, 0 = NO) ");

    string? choice = input_string();

    if (choice == nil) {
        println("Error");
        exit(-1);
    }

    if (*choice == "1") {
        for (int i = 0; i < PLAYER_COUNT; ++i) {
            player_dists[i] = clamp(player_dists[i] + roll_dice(), 0, dist - 1);
        }
    } else if (*choice == "0") {
        break;
    } else {
        println("Bad input!");
    }
}
